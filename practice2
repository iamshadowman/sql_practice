-- PRACTICE 2

CREATE TABLE STATION(
  ID INT PRIMARY KEY,
  CITY VARCHAR(21),
  STATE VARCHAR(2),
  LAT_N FLOAT,
  LONG_E FLOAT
);

INSERT INTO STATION
(ID,CITY,STATE,LAT_N,LONG_E)
VALUES
(1,"KOLKATA","WB",22.5451,88.69665),
(2,"MUMBAI","MH",23.4558,79.1412),
(3,"DELHI","DH",26.5545,82.4153),
(4,"CHENNAI","TN",18.1211,84.87425),
(5,"KOLKATA","WB",22.78625,87.48532),
(6,"PUNE","MH",23.245211,80.1478565),
(7,"AGRA","UP",18.77411,83.48932),
(8,"ANDHERI","MH",23.4555,80.7411),
(9,"ESPLANADE","WB",22.5425,87.58982),
(10,"AGRA","UP",18.98665,83.16842),
(11,"HOOGHLY","WB",22.2563,88);

SELECT * FROM STATION;

-- 1. Query a list of CITY and STATE from the STATION table.
SELECT CITY, STATE FROM STATION;

-- 2. Query a list of CITY names from STATION for cities that have an even ID number. 
-- Print the results in any order, but exclude duplicates from the answer.
SELECT ID, CITY FROM STATION
WHERE ID%2=0;

-- 3. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
SELECT COUNT(CITY) - COUNT(DISTINCT CITY) AS DIFFERENCE 
FROM STATION;

-- ****************
-- 4. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name).
-- If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
( -- SHORTEST
SELECT CITY, CHAR_LENGTH(CITY)
FROM STATION
ORDER BY CHAR_LENGTH(CITY) ASC, CITY ASC
LIMIT 1
)
UNION
( -- LARGEST
SELECT CITY, CHAR_LENGTH(CITY)
FROM STATION
ORDER BY CHAR_LENGTH(CITY) DESC, CITY ASC
LIMIT 1
);

-- ****************
-- 5. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. 
-- Your result cannot contain duplicates.
SELECT DISTINCT CITY AS STARTING_WITH_VOWELS
FROM STATION
WHERE LEFT(CITY,1) IN ("A","E","I","O","U");  -- USE OF IN

-- 6. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. 
-- Your result cannot contain duplicates.
SELECT CITY AS ENDING_WITH_VOWELS
FROM STATION
GROUP BY CITY
HAVING RIGHT(CITY,1) IN ("A","E","I","O","U");

-- 7. Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. 
-- Your result cannot contain duplicates.
SELECT DISTINCT CITY AS STARTING_ENDING_WITH_VOWELS
FROM STATION
WHERE LEFT(CITY,1)IN ("A","E","I","O","U") 
AND RIGHT(CITY,1) IN ("A","E","I","O","U");

-- 8. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY AS NOT_STARTING_AND_WITH_VOWELS
FROM STATION
WHERE LEFT(CITY,1) NOT IN ("A","E","I","O","U");

-- 9. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY AS NOT_ENDING_WITH_VOWELS
FROM STATION
WHERE RIGHT(CITY,1) NOT IN ("A","E","I","O","U");

-- 10. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels.
-- Your result cannot contain duplicates.
SELECT DISTINCT CITY AS NOT_STARTING_OR_ENDING_WITH_VOWELS
FROM STATION
WHERE LEFT(CITY,1) NOT IN ("A","E","I","O","U") 
OR RIGHT(CITY,1) NOT IN ("A","E","I","O","U");

-- 11. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. 
-- Your result cannot contain duplicates.
SELECT DISTINCT CITY AS NOT_STARTING_AND_ENDING_WITH_VOWELS
FROM STATION
WHERE LEFT(CITY,1) NOT IN ("A","E","I","O","U") 
AND RIGHT(CITY,1) NOT IN ("A","E","I","O","U");

-- 12. Query the following two values from the STATION table:
-- 12.1. The sum of all values in LAT_N rounded to a scale of 2 decimal places.
SELECT ROUND(SUM(LAT_N), 2)
FROM STATION;                      -- USE OF ROUND

-- 12.2. The sum of all values in LONG_W rounded to a scale of 2 decimal places.
SELECT ROUND(SUM(LONG_E), 2)
FROM STATION;

-- 13. Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 19.7880 and less than 137.2345. 
-- Truncate your answer to 4 decimal places
SELECT TRUNCATE(SUM(LAT_N), 4)
FROM STATION
WHERE LAT_N > 19.7880 AND LAT_N < 137.2345;

-- 14. Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. 
-- Truncate your answer to 4 decimal places
SELECT TRUNCATE(MAX(LAT_N), 4) AS MaxLatitude
FROM STATION
WHERE LAT_N < 137.2345;

-- SUBQUERY ******************************************
SELECT CITY, TRUNCATE(LAT_N, 4) AS MaxLatitude
FROM STATION
WHERE LAT_N = (
    SELECT MAX(LAT_N)
    FROM STATION
    WHERE LAT_N < 137.2345
);




